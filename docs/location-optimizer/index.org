#+TITLE: SAN: Location Optimizer

* Abstract

The /location optimizer/ takes all the data that is available and
tries to find the coordinates of the nodes in space.

Input:

- which node is connected to which node and on which port,

- tilt angle of nodes (optional).

Output:

- coordinates of nodes in space,

- tilt angle of spheres for display (optional).

The location optimizer does its calculations under the assumptions
that:

- the distance of a connection is 1,

- the angle between connections is the tetrahedral angle (≈ 109.5°).

The information here is only relevant for the version of SAN that was
current at the time this document was published.


* Nodes

  #+CAPTION: Geometry of a node with ports 1–4
  #+NAME:   fig:node
  [[./images/geometry.png]]

Properties of a node:

- A node may also be called a /sphere/, referring to the physical
  elements in the SAN construction kit.

- There is one special node, the root node:

  + It connects the computer to the network.

  + It has one USB port that connects to the computer.

  + It has only one port: 1

  + It’s ID is: ~^~

- Non-root nodes have four ports: 1, 2, 3, and 4

- Each non-root node has a unique ID: A–Z

- A node’s /axis/ is relevant if there is information about its tilt
  angle. The tilt angle is measured by an accelerometer. As of this
  writing there is only one sphere that contains an accelerometer.


* Current algorithm

1. 


* Problem



* Simulation

Assembling the structure can be simulated. This is useful for testing
the location optimizer without the physical construction kit.

Setup:

1. Install Node.js and the Yarn package manager.

2. Clone the SAN repository from: https://github.com/feklee/san/

3. Install all necessary dependencies and build the frontend (on
   Windows call ~rollup.cmd~ instead of ~rollup~):

   #+BEGIN_SRC shell
   $ cd webapp
   $ yarn install
   $ ./node_modules/.bin/rollup --config
   #+END_SRC

4. Start the simulation:

   #+BEGIN_SRC shell
   yarn start
   #+END_SRC
   
5. Open the SAN web app: http://localhost:8080

6. Go back to the command line and connect a node to the root node:

   #+BEGIN_SRC text
   +^1C1
   #+END_SRC

   This connects port ~C1~ (port 1 on node C) with ~^1~ (port 1 on the
   root node). The result is immediately visible in the web app.

7. Add additional nodes:

   #+BEGIN_SRC text
   +C2B1
   +B3D4
   #+END_SRC

   This connects ~B3~ (port 3 on node B) to ~C2~ and ~D4~ to ~B3~.


* Examples

** 1:1 connection

Just two nodes connected.

** Hexagon

This is the smallest loop that can be built.

** Pentagon

Note that the angle inside of a pentagon.

** Triangle

The genetic algorithm is flexible enough to allow even constructions
that are impossible, well unless you bend the rods that connect the
spheres.

** Dodecahedron

The dodecahedron consists of twelve pentagon sufaces. There are 20
unknown edges, i.e. nodes in the network. This means 60 variables have
to be found.

** Dodecahedron with tilt angles

Tilt angles provide
