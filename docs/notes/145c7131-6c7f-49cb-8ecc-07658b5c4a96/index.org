#+HTML_HEAD: <style>img{max-width:100%}.figure-number{display:none}</style>

#+TITLE: SAN: Location Optimizer

* Abstract

The /location optimizer/ takes all the data that is available and
tries to find the coordinates of the nodes in space.

Input:

- which node is connected to which node and on which port,

- tilt angle of nodes (optional).

Output:

- coordinates of nodes in space,

- tilt angle of spheres for display (optional).

The location optimizer does its calculations under the assumptions
that:

- the distance of a connection is 1,

- the angle between connections is the tetrahedral angle (≈ 109.5°).

The information here is only relevant for the version of SAN that was
current at the time this document was published.

  #+CAPTION: Dodecahedron built by two little girls at the end of Maker Faire Rome: Convergence successful!
  [[./images/Maker-Faire-Rome-2018.jpg]]

* Nodes

  #+CAPTION: Geometry of a node with ports 1–4
  [[./images/geometry.png]]

Properties of a node:

- A node may also be called a /sphere/, referring to the physical
  elements in the SAN construction kit.

- There is one special node, the root node:

  + It connects the computer to the network.

  + It has one USB port that connects to the computer.

  + It has only one port: 1

  + It’s ID is: ~^~

- Non-root nodes have four ports: 1, 2, 3, and 4

- Each non-root node has a unique ID: A–Z

- A node’s /axis/ is relevant if there is information about its tilt
  angle. The tilt angle is measured by an accelerometer. As of this
  writing there is only one sphere that contains an accelerometer.

* Genetic algorithm for location optimization

** Summary

A genetic algorithm is used to approximate the positions of the points
in space. This algorithm is called /location optimizer./ After
optimization, ideally all neighboring nodes have a distance of 1, and
the angles between the connecting vectors match those on the
spheres. The algorithm however is flexible enough to find solutions
even if distances or angles have been violated. See examples below.


** Steps

1. /Initialize:/ Generate a population $P$ of $n$ individuals. Each
   individual is described by a chromosome. A chromosome contains a
   list of coordinates. The coordinates describe a distribution of
   points in space. Initially the coordinates are chosen randomly.

   Example for a network composed of nodes $C$, $B$, and $D$:

   |       | $x_C$ | $y_C$ | $z_C$ | $x_B$ | $y_B$ | $z_B$ | $x_D$ | $y_D$ | $z_D$ |
   |-------+-------+-------+-------+-------+-------+-------+-------+-------+-------|
   | $P_1$ | -0.87 | -0.59 |  0.51 |  0.01 | -0.18 |  0.92 | -0.88 | -0.45 | -0.61 |
   | $P_2$ |  0.14 |  0.39 |  0.37 |  0.30 | -0.61 | -0.25 |  0.40 |  0.21 |  0.75 |
   | $P_3$ |  0.40 | -0.54 |  0.00 | -0.43 |  0.94 |  0.29 |  0.37 |  0.76 | -0.74 |
   | …     |       |       |       |       |       |       |       |       |       |
   | $P_n$ |  0.08 | -1.00 |  0.71 | -0.68 | -0.26 |  0.33 | -0.64 |  0.94 |  0.95 |

2. /Reproduce:/

   1. /Pair:/ Randomly select pairs of individuals. These individuals
      will act as parents in the next step.

      Example pair: $(P_3, P_1)$ (third individual and first
      individual)

   2. /Create offspring./ For each pair of parents:

      1. /Crossover:/ Form a child chromosome by taking one part of
         the chromosome from the first parent and the other part from
         the second parent.

         Child created from a crossover of the above example pair:

         | $P_3$: $x_C$ … $x_D$                   | $P_1$: $y_D$ … $z_D$ |
         |----------------------------------------+----------------------|
         | /                                      | <                    |
         | 0.40 -0.54 0.00 -0.43  0.94  0.29 0.37 | -0.45 -0.61          |

         The location of the crossover is random.

      2. /Mutate:/ Randomly change coordinates in the child
         chromosome.

         Example, modifying the above child:

         0.40 -0.54 *-1.50* -0.43 0.94 0.29 0.37 -0.45 *0.40*

3. /Find fitness:/ For each child determine how close the points in
   the chromosome are to an optimal distribution. An optimal
   distribution is one where:

   - the distance between each two neighboring nodes is 1,

   - the angle between each two connections from one node is the
     tetrahedral angle.

   The deviation to the optimal distribution is quantified as fitness
   and assigned to each child.

4. /Natural selection:/ Create a new population by combining:

   - the $n - 1$ best children,

   - the best individual from the previous generation.

5. /Display:/ Render the best individual in the new population on
   screen.

6. /Iterate:/ go to step 2.

** Problem

Genetic algorithms tend to get stuck in local minima. In that case all
individuals have converged to the same non-optimal solution. Mutation
of single coordinates worsens the fitness of individuals, and so they
don’t carry over to the next generation. Evolution has stopped.

* Simulation

Assembling the structure can be simulated. This is useful for testing
the location optimizer without the physical construction kit.

Setup:

1. Install Node.js and the Yarn package manager.

2. Clone the SAN repository from: [[https://github.com/feklee/san/]]

3. Install all necessary dependencies and build the frontend (on
   Windows call ~rollup.cmd~ instead of ~rollup~):

   #+BEGIN_SRC shell
   $ cd webapp
   $ yarn install
   $ ./node_modules/.bin/rollup --config
   #+END_SRC

4. Start the simulation:

   #+BEGIN_SRC shell
   yarn start simulate
   #+END_SRC
   
5. Open the SAN web app: http://localhost:8080

   [[./images/webapp-with-no-node.png]]

   To navigate in 3D in the canvas on the left side, use the mouse.

6. Go back to the command line and connect a node to the root node:

   #+BEGIN_SRC text
   +^1C1
   #+END_SRC

   This connects port ~C1~ (port 1 on node C) with ~^1~ (port 1 on the
   root node). The result is immediately visible in the web app.

   [[./images/webapp-with-one-node.png]]

   On the top right side you see an adjacency matrix. The numbers in
   the matrix refer to the connected ports. On the bottom righ side
   you see a log of the information that the webapp receives from the
   structure. On each line there is a timestamp on the left side. The
   circle on the right means that there is no information about a tilt
   angle for the connected node.

7. Add additional nodes:

   #+BEGIN_SRC text
   +C2B1
   +B3D4
   #+END_SRC

   This connects ~B3~ (port 3 on node B) to ~C2~ and ~D4~ to ~B3~.

   [[./images/webapp-with-three-nodes.png]]

* Examples

** 1:1 connection

Just two nodes connected.

*** Input

Simulation:

#+BEGIN_SRC text
+^1A1
+A2B1
#+END_SRC

[[./images/1-1-input.png]]

Adjacency matrix (numbers are ports): [[./data/1-1-adjacency.tsv][1-1-adjacency.tsv]]

*** Example solution 

[[./images/1-1.png]]

Coordinates: [[./data/1-1-coordinates.tsv][1-1-coordinates.tsv]]


** Hexagon

This is the smallest loop that can be built without violating the
tetrahedral angles.

*** Input

Simulation:

#+BEGIN_SRC text
+^1A1
+A2B1
+B2C1
+C2D1
+D2E1
+E2F1
+F2A3
#+END_SRC

[[./images/hexagon-input.png]]

Adjacency matrix (numbers are ports): [[./data/hexagon-adjacency.tsv][hexagon-adjacency.tsv]]

*** Example solution

[[./images/hexagon.png]]

Coordinates: [[./data/hexagon-coordinates.tsv][hexagon-coordinates.tsv]]

** Pentagon

Note that the interior angles of a pentagon are 108°. That is close to
but not identical to the tetrahedral angle of 109.5°. Nevertheless the
algorithm is able to approximate a solution. Even for nodes connected
in a triangle it finds a solution!

*** Input

Simulation:

#+BEGIN_SRC text
+^1A1
+A2B1
+B2C1
+C2D1
+D2E1
+E2A3
#+END_SRC

[[./images/pentagon-input.png]]

Adjacency matrix (numbers are ports): [[./data/pentagon-adjacency.tsv][pentagon-adjacency.tsv]]

*** Example solution

[[./images/pentagon.png]]

Coordinates: [[./data/pentagon-coordinates.tsv][pentagon-coordinates.tsv]]

** Dodecahedron

The dodecahedron consists of twelve pentagon sufaces. There are 20
unknown edges, i.e. nodes in the network. This means 60 variables have
to be found. In most runs the gentic algorithm fails, i.e. gets stuck
in a local minima without finding a satisfactory solution.

*** Input

Simulation:

#+BEGIN_SRC text
+^1A4
+A1B2
+A2E1
+A3F1
+B1C2
+B3H1
+C1D2
+C3J1
+D1E2
+D3L1
+E3N1
+F2O2
+F3G3
+G1P1
+G2H2
+H3I3
+I1Q1
+I2J2
+J3K3
+K1R1
+K2L2
+L3M3
+M1S1
+M2N2
+N3O3
+O1T1
+P2T3
+P3Q2
+Q3R2
+R3S2
+S3T2
#+END_SRC

[[./images/dodecahedron-input.png]]

Adjacency matrix (numbers are ports): [[./data/dodecahedron-adjacency.tsv][dodecahedron-adjacency.tsv]]

# *** Example solution

# [[./images/pentagon.png]]

# Coordinates: [[./data/pentagon-coordinates.tsv][pentagon-coordinates.tsv]]

# ** 1:4

# ** Triangle

# The genetic algorithm is flexible enough to allow even constructions
# that are impossible, well unless you bend the rods that connect the
# spheres.

# ** Dodecahedron with tilt angles

# Tilt angles provide additional information. This reduces the space of
# unknown variables. Therefore it should be easier to find a solution.
